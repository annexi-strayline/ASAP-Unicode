------------------------------------------------------------------------------
--                                                                          --
--                             Unicode Utilities                            --
--                                                                          --
--                        Normalization Form Utilities                      --
--                        Quick Check Query Facilities                      --
--                                                                          --
-- ------------------------------------------------------------------------ --
--                                                                          --
--  Copyright (C) 2019, ANNEXI-STRAYLINE Trans-Human Ltd.                   --
--  All rights reserved.                                                    --
--                                                                          --
--  Original Contributors:                                                  --
--  * Richard Wai (ANNEXI-STRAYLINE)                                        --
--                                                                          --
--  Redistribution and use in source and binary forms, with or without      --
--  modification, are permitted provided that the following conditions are  --
--  met:                                                                    --
--                                                                          --
--      * Redistributions of source code must retain the above copyright    --
--        notice, this list of conditions and the following disclaimer.     --
--                                                                          --
--      * Redistributions in binary form must reproduce the above copyright --
--        notice, this list of conditions and the following disclaimer in   --
--        the documentation and/or other materials provided with the        --
--        distribution.                                                     --
--                                                                          --
--      * Neither the name of the copyright holder nor the names of its     --
--        contributors may be used to endorse or promote products derived   --
--        from this software without specific prior written permission.     --
--                                                                          --
--  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS     --
--  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT       --
--  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A --
--  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      --
--  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
--  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT        --
--  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   --
--  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   --
--  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     --
--  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   --
--  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    --
--                                                                          --
------------------------------------------------------------------------------

-- Generated: 2019-08-18
-- DerivedNormalizationProps.txt source
-- https://www.unicode.org/Public/UCD/latest/ucd/DerivedNormalizationProps.txt


-- **************** THIS FILE IS AUTOMATICALLY GENERATED **************** --
--  - See Unicode.UCD.Generate_Normalization_Quick_Check_Body.adb -  --


-- DerivedNormalizationProps.txt --
-- Records loaded (NFC_QC) = 116


function Unicode.Normalization.Quick_Check.C (C: Wide_Wide_Character)
                                             return Quick_Check_Result
is
   type Codepoint is mod 2**24;


   function Plane_00_Lookup (C: Codepoint) return Quick_Check_Result is
      (case C is
         when 16#000340# .. 16#000341# => NO,
         when 16#000343# .. 16#000344# => NO,
         when 16#000374#               => NO,
         when 16#00037E#               => NO,
         when 16#000387#               => NO,
         when 16#000958# .. 16#00095F# => NO,
         when 16#0009DC# .. 16#0009DD# => NO,
         when 16#0009DF#               => NO,
         when 16#000A33#               => NO,
         when 16#000A36#               => NO,
         when 16#000A59# .. 16#000A5B# => NO,
         when 16#000A5E#               => NO,
         when 16#000B5C# .. 16#000B5D# => NO,
         when 16#000F43#               => NO,
         when 16#000F4D#               => NO,
         when 16#000F52#               => NO,
         when 16#000F57#               => NO,
         when 16#000F5C#               => NO,
         when 16#000F69#               => NO,
         when 16#000F73#               => NO,
         when 16#000F75# .. 16#000F76# => NO,
         when 16#000F78#               => NO,
         when 16#000F81#               => NO,
         when 16#000F93#               => NO,
         when 16#000F9D#               => NO,
         when 16#000FA2#               => NO,
         when 16#000FA7#               => NO,
         when 16#000FAC#               => NO,
         when 16#000FB9#               => NO,
         when 16#001F71#               => NO,
         when 16#001F73#               => NO,
         when 16#001F75#               => NO,
         when 16#001F77#               => NO,
         when 16#001F79#               => NO,
         when 16#001F7B#               => NO,
         when 16#001F7D#               => NO,
         when 16#001FBB#               => NO,
         when 16#001FBE#               => NO,
         when 16#001FC9#               => NO,
         when 16#001FCB#               => NO,
         when 16#001FD3#               => NO,
         when 16#001FDB#               => NO,
         when 16#001FE3#               => NO,
         when 16#001FEB#               => NO,
         when 16#001FEE# .. 16#001FEF# => NO,
         when 16#001FF9#               => NO,
         when 16#001FFB#               => NO,
         when 16#001FFD#               => NO,
         when 16#002000# .. 16#002001# => NO,
         when 16#002126#               => NO,
         when 16#00212A# .. 16#00212B# => NO,
         when 16#002329#               => NO,
         when 16#00232A#               => NO,
         when 16#002ADC#               => NO,
         when 16#00F900# .. 16#00FA0D# => NO,
         when 16#00FA10#               => NO,
         when 16#00FA12#               => NO,
         when 16#00FA15# .. 16#00FA1E# => NO,
         when 16#00FA20#               => NO,
         when 16#00FA22#               => NO,
         when 16#00FA25# .. 16#00FA26# => NO,
         when 16#00FA2A# .. 16#00FA6D# => NO,
         when 16#00FA70# .. 16#00FAD9# => NO,
         when 16#00FB1D#               => NO,
         when 16#00FB1F#               => NO,
         when 16#00FB2A# .. 16#00FB36# => NO,
         when 16#00FB38# .. 16#00FB3C# => NO,
         when 16#00FB3E#               => NO,
         when 16#00FB40# .. 16#00FB41# => NO,
         when 16#00FB43# .. 16#00FB44# => NO,
         when 16#00FB46# .. 16#00FB4E# => NO,
         when 16#000300# .. 16#000304# => MAYBE,
         when 16#000306# .. 16#00030C# => MAYBE,
         when 16#00030F#               => MAYBE,
         when 16#000311#               => MAYBE,
         when 16#000313# .. 16#000314# => MAYBE,
         when 16#00031B#               => MAYBE,
         when 16#000323# .. 16#000328# => MAYBE,
         when 16#00032D# .. 16#00032E# => MAYBE,
         when 16#000330# .. 16#000331# => MAYBE,
         when 16#000338#               => MAYBE,
         when 16#000342#               => MAYBE,
         when 16#000345#               => MAYBE,
         when 16#000653# .. 16#000655# => MAYBE,
         when 16#00093C#               => MAYBE,
         when 16#0009BE#               => MAYBE,
         when 16#0009D7#               => MAYBE,
         when 16#000B3E#               => MAYBE,
         when 16#000B56#               => MAYBE,
         when 16#000B57#               => MAYBE,
         when 16#000BBE#               => MAYBE,
         when 16#000BD7#               => MAYBE,
         when 16#000C56#               => MAYBE,
         when 16#000CC2#               => MAYBE,
         when 16#000CD5# .. 16#000CD6# => MAYBE,
         when 16#000D3E#               => MAYBE,
         when 16#000D57#               => MAYBE,
         when 16#000DCA#               => MAYBE,
         when 16#000DCF#               => MAYBE,
         when 16#000DDF#               => MAYBE,
         when 16#00102E#               => MAYBE,
         when 16#001161# .. 16#001175# => MAYBE,
         when 16#0011A8# .. 16#0011C2# => MAYBE,
         when 16#001B35#               => MAYBE,
         when 16#003099# .. 16#00309A# => MAYBE,

         when others => YES)
      with Inline;

   function Plane_01_Lookup (C: Codepoint) return Quick_Check_Result is
      (case C is
         when 16#01D15E# .. 16#01D164# => NO,
         when 16#01D1BB# .. 16#01D1C0# => NO,
         when 16#0110BA#               => MAYBE,
         when 16#011127#               => MAYBE,
         when 16#01133E#               => MAYBE,
         when 16#011357#               => MAYBE,
         when 16#0114B0#               => MAYBE,
         when 16#0114BA#               => MAYBE,
         when 16#0114BD#               => MAYBE,
         when 16#0115AF#               => MAYBE,

         when others => YES)
      with Inline;

   function Plane_02_Lookup (C: Codepoint) return Quick_Check_Result is
      (case C is
         when 16#02F800# .. 16#02FA1D# => NO,

         when others => YES)
      with Inline;

   function Plane_03_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_04_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_05_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_06_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_07_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_08_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_09_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_0A_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_0B_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_0C_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_0D_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_0E_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_0F_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;

   function Plane_10_Lookup (C: Codepoint) return Quick_Check_Result is
      (YES) with Inline;


   CP: constant Codepoint := Codepoint (Wide_Wide_Character'Pos(C));
begin
   return (case CP is
      when 16#000000# .. 16#00FFFF# => Plane_00_Lookup (CP),
      when 16#010000# .. 16#01FFFF# => Plane_01_Lookup (CP),
      when 16#020000# .. 16#02FFFF# => Plane_02_Lookup (CP),
      when 16#030000# .. 16#03FFFF# => Plane_03_Lookup (CP),
      when 16#040000# .. 16#04FFFF# => Plane_04_Lookup (CP),
      when 16#050000# .. 16#05FFFF# => Plane_05_Lookup (CP),
      when 16#060000# .. 16#06FFFF# => Plane_06_Lookup (CP),
      when 16#070000# .. 16#07FFFF# => Plane_07_Lookup (CP),
      when 16#080000# .. 16#08FFFF# => Plane_08_Lookup (CP),
      when 16#090000# .. 16#09FFFF# => Plane_09_Lookup (CP),
      when 16#0A0000# .. 16#0AFFFF# => Plane_0A_Lookup (CP),
      when 16#0B0000# .. 16#0BFFFF# => Plane_0B_Lookup (CP),
      when 16#0C0000# .. 16#0CFFFF# => Plane_0C_Lookup (CP),
      when 16#0D0000# .. 16#0DFFFF# => Plane_0D_Lookup (CP),
      when 16#0E0000# .. 16#0EFFFF# => Plane_0E_Lookup (CP),
      when 16#0F0000# .. 16#0FFFFF# => Plane_0F_Lookup (CP),
      when 16#100000# .. 16#10FFFF# => Plane_10_Lookup (CP),

      when others => YES);

end Unicode.Normalization.Quick_Check.C;
